Platformer Movements:
  Define Character Movement Variables
  ☐ Set up variables for **acceleration** (how quickly speed increases), **deceleration** (how quickly speed decreases when no input is given), **max_speed** (the     highest speed the character can reach), **velocity** (current speed and direction)
  ☐ Handle Input for Acceleration
    Check for player input (left or right).
  Gradually increase the velocity by adding acceleration, ensuring it does not exceed max speed.
  ☐ Apply Deceleration When No Input
  If no movement input is detected, reduce velocity gradually using deceleration.
  Stop the character completely when the velocity is close to zero to prevent sliding.
  ☐ Clamp Velocity to Max Speed
  Ensure the velocity does not exceed the max speed in either direction.
  This prevents the character from moving too fast.
  ☐ Apply Velocity to Character
  Use Godot’s movement functions (e.g., move_and_slide()) to apply the velocity to the character.
  ☐ Consider Friction and Air Control
  If the character is on the ground, apply full acceleration and deceleration.
  If in the air, adjust the acceleration and deceleration to allow some control but not as much as on the ground.

Finite State Machine for Animation:
A finite state machine is a concept that manages states and transitions between them with rules dictating when a state chance can occur

 ☐ Create a state (data point)
 A state is just a class with methods
   ☐ **Enter**
     ☐ Play animation
   ☐ **Exit**
     ☐ Do nothing
   ☐ **Update** methods
     ☐ Check for inputs
   Also a 
   ☐ **Signal** that is triggered on change of state.



 ☐ Create a FiniteStateMachine class
   ☐ Make a way to track each state (Dict, List, Enums)
   (Here, one way described is to create child nodes under the FSM node and iterate through them, creating a dictionary with each child's name as the key. This makes it easier to use export variables)
   ☐ Iniitalise the structure in the `_on_ready` function
   ☐ Set initial state (Use export variable)
   ☐ Setup the change_state function by exiting the older state and entering the `newstate.Enter()` function
   ☐ Run the current state's `Update()` function till we change states
 ☐ Transition Manager
   ☐ Centralised
     ☐ Self Transitions require a larger logic base
   ☐ Decentralised
     ☐ Manager decides when to switch
     ☐ Enemy is triggered
     